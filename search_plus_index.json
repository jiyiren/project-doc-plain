{"./":{"url":"./","title":"简介","keywords":"","body":" 基于 Gitbook 的项目文档设计 @JIYI @Leader @Boss 基于 Gitbook 的开源生态，更具美观的项目文档库 此系统主要面向于 IT 项目开发者 服务。作者集成了一些必要的插件以及一些规范化的写作风格，整体上以简洁、清晰为主要设计倾向。本项目基于 Gitbook 开源生态，具有较多开源插件、模板支持，使用性较广，问题排查方便，且可导出为 HTML、PDF 等格式传播，形式多样。也具有 Book、API、FQA 等多种模式形态，丰富实用。此文档基于个人审美自定义的，大家可以根据自身感觉进行重新设计扩展。公司内部文档应放在公司的 Gitlab 里，个人的可以放 Github 中以 Pages 方式开放。 目录内容 本文档包含以下内容(均是示例)： Features Architecture Running 环境需求 执行脚本 Resources References Features 示例 基于 Gitbook 开源生态，多插件，多模式支持，风格清晰； 下面是自己扯的其他代码项目的 Features，仅仅作为例子； 基于 Dubbo 高性能 RPC 框架，提高执行效率和扩展性； 采用 Redis 构建分布式消息队列，实现非阻塞调用； 数据采用 Json 格式存储与传输，更通用且便于扩展移植； 模块化设计，功能抽象成函数、公共组件独立成库； Architecture 示例 Topic: 一个消息主题，也就是一个分布式消息队列名称; Producer: 生产者，可以有多个，可同时生产多个 Topic； Partion: 就是 Topic 分布式的体现： 一个 Topic 分成多个 Partion； 多个 Producer 生产消息可以并行入队； 同一个 Partion 里保证消息有序； Consumer Group: 消费者组，这是 Kafka 最特别之处： 一个消费组消费一个 Topic 的全量数据； 组内消费者消费一个或多个 Partion 数据； 一个组里的消费者应小于等于 Topic 的 Partion 数量； 架构最好配一张结构图，并将各个点概述下即可，中英文间加空格。 Running 示例 环境需求 下面为各个执行模块所需要的依赖包。 分布式 - Main Host pip install mysql-connector-python // MySQL 数据库连 pip install DBUtils // 数据库连接池 pip install redis // Redis 数据库 pip install flask // Flask 以构建 Web API pip install simplejson // Json 解析库 分布式 - Slave Host： pip install -r slave/requirement.txt 上面主要按照自己项目的模块来，比如也可以写 Java 的 Maven 依赖； 执行脚本 项目主要分为 Main Host 进程、Slave Host 进程、定时清理日志进程 三大进程，我们分别实现了对应的启动脚本。 Main Host： ./main-host-process.sh > main.log 2>&1 & Slave Host： ./slave-host-process.sh > slave.log 2>&1 & 定时清理进程： crontab -f schedule.file 说明：最好将项目都通过命令启动，这样可以规避很多操作失误。 Resources 下面为目前暂时需要的资源工具信息： Kafka: 地址：xxx.aaa.bbb.xxxx 主题：demo1,demo2 Redis: 内存：2 GB 地址和端口： Master: xxx.aaa.bbb.cccc:1234 Slaver: xxx.aaa.bbb.dddd:1234 密码：xxxxxxxx MySQL: 地址：xxx.aaa.bbb.ccc 用户名/密码：name/xxxx 可以列出所有需要依赖的资源： 如果是内部可以公开所有信息， 如果不是则要注意隐私。 References https://redis.io/ https://jiyiren.github.io/2018/08/04/kafka/ http://gitbook.zhangjikai.com/themes.html http://www.chengweiyang.cn/gitbook/ https://www.cnblogs.com/YangJieCheng/p/7991660.html Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 16:32:37 "},"section1/resources.html":{"url":"section1/resources.html","title":"环境","keywords":"","body":" 资源说明 @JIYI @Leader 项目虚机、软件、环境资源配置说明 根据自己需求，说明标题的主题内容。这里我给了一个简单示例：加里敦 基于 Gitbook 的项目文档 的内部资源配置。主要涉及开发测试与正式环境下资源说明。具体包含 MySQL、Redis 等数据库配置和使用说明，以及正式部署资源的申请标准，和部署注意事项。并记录主要使用的操作命令和相应的参考文档。 目录内容 本文档包含以下内容： 项目资源 测试环境 正式环境 学习实践 Redis MySQL 参考 项目资源 下面为目前暂时需要的资源工具，分为测试和正式的。 Redis ：作为分布式任务有序队列使用，同时也作为存储任务结果的临时存储器； MySQL： 作为对外提供 Web API 服务的存储器，因其索引具有加速查询性，因此适合； 测试环境 Redis : 类型：Master-Slave 类型 内存：2 GB Host: my.test.redis.aaa.bbb.ccc:1234 密码：xxxxxx MySQL : 地址：127.0.0.1:3306 用户/密码：username/passwd 数据库：projectdoc 正式环境 Redis : 类型：Master-Slave 类型 内存：前期 2 GB，之后扩容为 5 GB Host: my.formal.redis.aaa.bbb.ccc:1234 MySQL : Host: my.formal.mysql.aaa.bbb:3306 用户/密码：username / passwd 数据库：projectdoc 学习实践 Redis 官网：https://redis.io/ MacOS 安装： # 从官网下载软件包 tar -zxf redis-xxx.tar.gz mv redis-xxx /usr/local/redis-xxx # 建立软链接 ln -s /usr/local/redis-xx /usr/local/redis # 添加到环境变量 export REDIS_HOME=/usr/local/redis 启动服务：redis-server 本地连接：redis-cli 连接远程： redis-cli -h [ip] -p [port] -a [pwd] # 例如： redis-cli -h 127.0.0.1 -p 1234 -a 123456 其他操作： # 选择数据库，默认 Redis 有 16 个 select [index] # 显示所有 pattern 匹配的键 KEYS [pattern_key] # 显示列表长度 LLEN [key] # 显示列表从 start 到 end 索引，显示所有则 end = -1 LRANGE [key] [start] [end] MySQL 官网：https://www.mysql.com/ 安装： wget http://repo.mysql.com/mysql57-community-release-el7-10.noarch.rpm rpm -Uvh mysql57-community-release-el7-10.noarch.rpm yum install -y mysql-community-server 启动： service mysqld start/stop/status systemctl start/stop/status mysqld.service 其他： # 修改 root 密码 mysqladmin -u root password \"newpass\" # 配置文件： /etc/my.cnf # 允许远程登录 GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '密码' WITH GRANT OPTION; 参考 https://redis.io/ https://www.mysql.com/ https://www.cnblogs.com/alex3714/p/6351797.html https://www.cnblogs.com/guanfuchang/p/6561034.html https://blog.csdn.net/chenqiuge1984/article/details/80127446 Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-14 17:20:17 "},"section2/modules.html":{"url":"section2/modules.html","title":"项目结构","keywords":"","body":" 项目结构说明 @JIYI @Leader 基于 Gitbook 的项目文档目录结构说明 这里主要说明本项目结构目录，既然基于 Gitbook 的框架的，整体上也是 Gitbook 目录结构。本项目已经全部放在 Github 仓库 里了，大家可以直接去看源码目录。就规范性来讲，还是按模块划分比较好一点，本页说明结构模块以及各个文件的作用。 目录内容 本文档包含以下内容： 项目目录 配置文件 SUMMARY.md book.json 参考 项目目录 项目整体结构如下： . ├── README.md ├── SUMMARY.md ├── book.json ├── _book │ ├── _img │ ├── gitbook │ ├── index.html │ ├── section1 │ ├── section2 │ ├── section3 │ └── styles ├── _img │ ├── xxxx.png ├── section1 │ └── resources.md ├── section2 │ ├── functions.md │ ├── modules.md │ ├── plugins.md │ └── scripts.md ├── section3 │ └── openimage.md └── styles └── website.css 各个结构说明： README.md: 网站的 README，但一般很多人作为主页； SUMMARY.md: 网站结构文档，主要实现侧边栏目录导航； book.json: 整个 gitbook 项目的配置文件； _book目录: 这个是自动生成的目录，是构建出来的静态页面； _img目录: 这个是个人设定的图片等静态资源目录； section1/2/3目录: 这个是 gitbook 项目各个模块目录，里面也放置 markdown 文件。 styles目录: 这个也是自己定义的，这里我是实现项目整体的主题配色。 配置文件 SUMMARY.md # Summary ## 介绍 * [简介](README.md) * [环境](section1/resources.md) ## 实现 * [项目结构](section2/modules.md) * [功能划分 ★](section2/functions.md) * [必备插件](section2/plugins.md) * [运行脚本 ❤︎](section2/scripts.md) ## 说明 * [图库资源](section3/openimage.md) * [无色主题]() book.json { \"title\": \"ProjectDoc\", \"author\": \"jiyiren\", \"description\": \"ProjectDoc\", \"language\": \"zh-hans\", \"links\": { \"sidebar\": { \"本文托管\": \"https://github.com/jiyiren/ProjectDoc\" } }, \"styles\": { \"website\": \"styles/website.css\" }, \"plugins\": [ \"splitter@^0.0.8\", \"-lunr\", \"-search\", \"search-plus@^0.0.11\", \"tbfed-pagefooter@^0.0.1\", \"anchor-navigation-ex@0.1.8\", \"-highlight\", \"prism@^2.1.0\", \"prism-themes@^0.0.2\" ], \"pluginsConfig\": { \"theme-default\": { \"showLevel\": true }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright &copy csyiji@gmail.com 2019\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" }, \"prism\": { \"css\": [ \"prism-themes/themes/prism-a11y-dark.css\" ] } }, \"pdf\": { \"pageNumbers\": true, \"fontSize\": 12, \"paperSize\": \"a4\", \"margin\": { \"right\": 10, \"left\": 10, \"top\": 10, \"bottom\": 10 } } } 参考 https://redis.io/ http://docs.celeryproject.org/en/latest/ https://www.cnblogs.com/alex3714/p/6351797.html https://www.cnblogs.com/guanfuchang/p/6561034.html https://blog.csdn.net/chenqiuge1984/article/details/80127446 Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 16:39:04 "},"section2/functions.html":{"url":"section2/functions.html","title":"功能划分 ★","keywords":"","body":" 功能划分 @JIYI @Leader 基于 Gitbook 的项目文档功能划分与说明 示例：这里介绍项目的功能划分情况，需要根据自己项目的情况进行划分说明。可以根据项目前期需求。比如一个 Web 项目，可能分为前端、后台，而后台有可以分为 web api 模块，以及第三方接口部分。如果仅仅是 API 后台，那这里就可以只介绍需求说明，再对应给出每个 API 的说明内容即可。实际上不管什么项目，以任何一个人视角看本说明都能一目了然：需求、功能实现、如何使用！ 目录内容 只给出简单结构示例，大家根据自己项目实现 本文档包含以下内容： 功能需求 功能说明 web服务接口 对外接口功能 定时执行功能 参考 功能需求 功能说明 web服务接口 对外接口功能 定时执行功能 参考 https://redis.io/ https://jiyiren.github.io/2018/08/04/kafka/ Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 16:10:42 "},"section2/plugins.html":{"url":"section2/plugins.html","title":"必备插件","keywords":"","body":" 必备插件说明 @JIYI @Leader 基于 Gitbook 的项目文档的必备插件说明 基于 Gitbook 的项目文档设计本身完全基于 Gitbook，原生的 Gitbook 项目结构很简单，比较简陋。因此，第三方插件 的支持可以很大程度上美化文档的展示效果，比如：支持侧边栏拖动修改宽度，支持右上角目录，支持代码高亮等。我们的文档不追求如何的酷炫，而是要一目了然。无论什么项目，一个易读易懂的文档都是值得思考的。 目录内容 本文档包含以下内容： 基本环境 安装 Nodejs 安装 gitbook 使用 gitbook 项目结构 基本结构 简单示例 必备插件 splitter simple-page-toc search-plus tbfed-pagefooter anchor-navigation-ex 参考 基本环境 安装 Nodejs 全球官网：https://nodejs.org/en 中文官网：http://nodejs.cn/ 下载安装后测试下 Node 是否安装成功： $ node -v v10.15.3 如果提示命令没找到，那么是由于 Node 没有加入环境变量，大家将安装的 Node 环境地址放在环境变量里就可以了。 安装 gitbook 直接输入命令进行安装： $ npm install gitbook-cli -g npm 也是和 node 一起安装的，node 存在 npm 就存在。-g 参数表示全局安装，也就是模块包会安装到全局环境里，这个是推荐做法，因为像这种工具命令全局安装是最好的。而项目依赖模块则项目内安装即可。 测试 gitbook 命令是否安装成功： $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3 使用 gitbook 任意找一个空目录，执行： $ gitbook init warn: no summary file in this book info: create README.md info: create SUMMARY.md info: initialization is finished 会在当前目录下创建出两个文件，分别是： README.md SUMMARY.md 暂且先不管其他的，我们现在可以直接运行试试，先把流程走通： $ gitbook build $ gitbook serve 上面的 gitbook build 是编译整个 markdown 文件，然后在当前目录生成 _book 目录，里面是 html 页面。这个主要在部署的时候用到。 而 gitbook serve 是本地调试开启服务命令，项目最终是要成网站的，因此, 该命令可以开启本地 http://127.0.0.1:4000 地址作为网站浏览地址。 假如大家执行 gitbook serve 出错，建议大家先 gitbook build 在 gitbook serve. 项目结构 基本结构 我们上面通过 gitbook init 生成的只有下面两个文件： README.md SUMMARY.md 但实际上我们要定制我们的 gitbook 项目，项目还有一个配置文件的: book.json，只不过 gitbook init 没有自动创建出来。我们一看这文件名就应该知道这个配置文件就是 json 格式的。最基本的 book.json 长什么样子呢？如下所示： { \"title\": \"ProjectDoc\", \"author\": \"jiyiren\", \"description\": \"ProjectDoc\", \"language\": \"zh-hans\", \"links\": { }, \"styles\": { }, \"plugins\": [ ], \"pluginsConfig\": { } } 基本 book.json 内容： title: 网站标题; author: 网站作者; description: 网站描述; language: 网站语言; links: 侧边栏配置项; styles: 全局自定义网站样式; plugins: 插件配置项; pluginsConfig: 配置插件的配置项，为一些插件传入参数的; 简单示例 上面最基本的 book.json，对默认界面基本无变动，其界面显示为： 我们来一个简单 gitbook 定制，book.json 如下： { \"title\": \"ProjectDoc\", \"author\": \"jiyiren\", \"description\": \"ProjectDoc\", \"language\": \"zh-hans\", \"links\": { \"sidebar\": { \"本文托管\": \"https://github.com/jiyiren/ProjectDoc\" } }, \"styles\": { }, \"plugins\": [ \"anchor-navigation-ex@0.1.8\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } 其界面为如下，多出左侧栏 本文托管，和文章右侧的 目录以及回到开头 按钮。 必备插件 插件使用 插件添加：插件的使用就放在 book.json 的 plugins 和 pluginsConfig 键中，形式如：pluginName@versionName 也就是插件名@版本，当然没有版本时，采用最新默认版本。 插件删除：要删除自带的插件则使用 -pluginName 即 -插件名 下面介绍本文档使用到的插件。 splitter 使侧边栏的宽度可以自由调节 \"plugins\": [ \"splitter\" ] simple-page-toc 文章页面右上角显示目录，这个目前已经被废弃，建议每个页面自己生成 md 目录。 { \"plugins\" : [ \"simple-page-toc\" ], \"pluginsConfig\": { \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true } } } search-plus 支持中文搜索, 需要将默认的 search 和 lunr 插件去掉 { \"plugins\": [\"-lunr\", \"-search\", \"search-plus\"] } tbfed-pagefooter 为页面添加页脚 \"plugins\": [ \"tbfed-pagefooter\" ], \"pluginsConfig\": { \"tbfed-pagefooter\": { \"copyright\":\"Copyright &copy zhangjikai.com 2017\", \"modify_label\": \"该文件修订时间：\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" } } anchor-navigation-ex 添加Toc到侧边悬浮导航以及回到顶部按钮，这个自动生成的悬浮目录必须以下面形式书写，也就是一定要有一个是 h1 开头的，否则不能识别。 # h1 ## h2 ### h3 配置代码： { \"plugins\": [ \"anchor-navigation-ex\" ], \"pluginsConfig\": { \"anchor-navigation-ex\": { \"isRewritePageTitle\": true, \"isShowTocTitleIcon\": true, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" } } } prism 使用 Prism.js 为语法添加高亮显示，需要将 highlight 插件去掉。该插件自带的主题样式较少，可以再安装 prism-themes 插件，里面多提供了几种样式，具体的样式可以参考 这里，在设置样式时要注意设置 css 文件名，而不是样式名。 { \"plugins\": [ \"-highlight\", \"prism@^2.1.0\", \"prism-themes@^0.0.2\" ], \"pluginsConfig\": { \"prism\": { \"css\": [ \"prism-themes/themes/prism-a11y-dark.css\" ] } } } 其他插件大家可以参考这个博主的：http://gitbook.zhangjikai.com/plugins.html 参考 https://redis.io/ https://jiyiren.github.io/2018/08/04/kafka/ Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 16:33:33 "},"section2/scripts.html":{"url":"section2/scripts.html","title":"运行脚本 ❤︎","keywords":"","body":" 运行脚本说明 @JIYI @Leader 基于 Gitbook 的项目各个模块一键运行方式介绍 示例：这里给出项目完整运行的介绍说明。包括基 本环境配置、测试环境部署、线上环境部署方式 说明。如果该项目包含多种模块，那么每种模块的运行也都需要介绍说明的。一般建议大家的项目运行方式都应该以 bash 或 python 脚本 或 CI 方式给出。这样任何人接收自己的项目都不会因为运行项目参数给错而导致失败。写好的脚本有利于运维效率的提升。 目录内容 只给出简单结构示例，大家根据自己项目实现 本文档包含以下内容： 基本环境配置 执行脚本说明 模块1进程脚本 模块2进程脚本 模块3进程脚本 CI部署说明 测试环境部署 生产环境部署 参考 基本环境配置 执行脚本说明 CI部署说明 模块1进程脚本 模块2进程脚本 模块1进程脚本 CI部署说明 测试环境部署 生产环境部署 参考 https://redis.io/ https://jiyiren.github.io/2018/08/04/kafka/ Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 16:33:45 "},"section3/openimage.html":{"url":"section3/openimage.html","title":"图库资源","keywords":"","body":" 免费图库资源 @JIYI @Leader 无版权图库推荐 项目首页给出简介的同时，搭配一张背景图是很有感觉的。一般我都会去无版权图片库找一张搭配，毕竟程序员老是敲代码和文字打交道，已经苦不堪言了，来一点 色彩图像 刺激真的会让人耳目一新。很多时候程序员不仅仅应该是实现功能方，我们也应该要把自己当做甲方或者用户，去体验什么样的设计能让自己感觉舒适。我喜欢有自己的个性，有自己的色彩配色，就像本项目一样：加粗、超链接、斜体等等颜色都一样，这些颜色也是我自个配的。大家如果不喜欢可以自己修改或者去掉配色而使用默认的。 目录内容 本文档包含以下内容： pixabay pexels isorepublic gratisography rawpixel polayoutu pxhere picjumbo 参考 pixabay 推荐：★★★★★ 地址：https://pixabay.com/ 主页： pexels 推荐：★★★★★ 地址：https://www.pexels.com/ 主页： isorepublic 推荐：★★★★★ 地址：https://isorepublic.com/ 主页： gratisography 推荐：★★★★ 地址：https://gratisography.com/ 主页： rawpixel 推荐：★★★★ 地址：https://www.rawpixel.com/ 主页： polayoutu 推荐：★★★★ 地址：http://www.polayoutu.com/collections 主页： pxhere 推荐：★★★★ 地址：https://pxhere.com/ 主页： picjumbo 推荐：★★★ 地址：https://picjumbo.com/ 主页： 参考 https://pixabay.com/ https://www.pexels.com/ https://isorepublic.com/ https://gratisography.com/ https://www.rawpixel.com/ http://www.polayoutu.com/collections https://pxhere.com/ https://picjumbo.com/ https://www.yuque.com/ruanyf/weekly/free-photos Copyright © csyiji@gmail.com 2019 all right reserved，powered by Gitbook该文件修订时间： 2019-09-15 17:14:37 "}}